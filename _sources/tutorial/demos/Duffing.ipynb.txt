{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Duffing Oscillator Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "import scipy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "import mousai as ms\n",
    "from scipy import pi, sin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Errors:  [[  2.37117237e-09  -3.36810080e-10  -1.90602960e-08  -4.40279480e-09\n",
      "    2.57081384e-10   4.56534288e-09   3.88776401e-08]]\n",
      "Constant term of FFT of signal should be zero:  (-0.0090026131189+0j)\n"
     ]
    }
   ],
   "source": [
    "# Test that all is working. Extra harmonics help the constant term of FFT land at zero. \n",
    "# Artificial biases cause this error because of non-zero relative phase of response. \n",
    "# Explaination needs an example. Just trust me. Use more harmonics. \n",
    "t, x, e, amps, phases = ms.hb_so(ms.duff_osc, sp.array([[0,1,-1,0,0,0,0]]), .7)\n",
    "print('Errors: ',e)\n",
    "print('Constant term of FFT of signal should be zero: ', ms.fftp.fft(x)[0,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jslater/anaconda/lib/python3.6/site-packages/numpy/core/numeric.py:531: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  return array(a, dtype, copy=False, order=order)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1103f9748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's get a smoother response\n",
    "time, x = ms.time_history(t,x)\n",
    "plt.plot(time,x.T)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.34850556  0.98635512  1.41526032  0.95129854 -0.40091298 -1.31613416\n",
      "  -1.29636388]]\n",
      "[[-0.00900260+0.j         -1.05973076-5.0343169j  -0.02567193+0.01682272j\n",
      "  -0.12986547-0.17325323j -0.12986547+0.17325323j -0.02567193-0.01682272j\n",
      "  -1.05973076+5.0343169j ]]\n"
     ]
    }
   ],
   "source": [
    "t, x, e, amps, phases = ms.hb_so(ms.duff_osc, sp.array([[0,1,-1,0,0,0,0]]), .7, f_tol = 1e-10)\n",
    "print(x)\n",
    "print(sp.fftpack.fft(x))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp.fftpack.fft(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(t,sin(0.7*t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def duff_osc2(x, v, params):\n",
    "    omega = params['omega']\n",
    "    t = params['cur_time']\n",
    "    return -x-.1*x**3-.1*v+1*sin(omega*t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.18301653  0.89755789  1.38727516  1.33327431  0.72344894 -0.41327672\n",
      "  -1.21777379 -1.42368095 -1.10589493]] [[  3.05234490e-09  -5.12549059e-10  -1.90306010e-08  -1.03661774e-07\n",
      "   -1.52197536e-07   1.41372924e-09   3.25032445e-09   6.38679235e-07\n",
      "    5.26556565e-08]]\n",
      "Constant term of FFT of signal should be zero:  (-0.00208664413924+0j)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jslater/anaconda/lib/python3.6/site-packages/numpy/core/numeric.py:531: ComplexWarning: Casting complex values to real discards the imaginary part\n",
      "  return array(a, dtype, copy=False, order=order)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d649588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "t, x, e, amps, phases = ms.hb_so(duff_osc2, sp.array([[0,1,-1,0,0,0,0,0,0]]), .7)\n",
    "print(x,e)\n",
    "print('Constant term of FFT of signal should be zero: ', ms.fftp.fft(x)[0,0])\n",
    "time, x = ms.time_history(t,x)\n",
    "plt.plot(time,x.T)\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "omega = sp.linspace(0.1,3,200)+1/200\n",
    "amp = sp.zeros_like(omega)\n",
    "x = sp.array([[0,-1,1,0,0]])\n",
    "for i, freq in enumerate(omega):\n",
    "    #print(i,freq,x)\n",
    "    try:\n",
    "        t, x, e, amps, phases = ms.hb_so(duff_osc2, x, freq)#, f_tol = 1e-10)#, callback = resid)\n",
    "        amp[i]=amps[0]\n",
    "    except:\n",
    "        amp[i] = sp.nan    \n",
    "plt.plot(omega, amp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The break is an indicative of a break in the branch and is actually a result of the `solution` being unstable.  Not the system, but the solution. By that we mean that while this is considered a solution, it isn't one that will actually continue in a real situation and another solution will necessarily be found. \n",
    "\n",
    "A simple solution is to change the starting guess to be away from the solution and see if it finds another one. Indeed that happens. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "omega = sp.linspace(0.1,3,90)+1/200\n",
    "amp = sp.zeros_like(omega)\n",
    "x = sp.array([[0,-1,1,0,0,0,0,0,0]])\n",
    "for i, freq in enumerate(omega):\n",
    "    #print(i,freq,x)\n",
    "    #print(sp.average(x))\n",
    "    x = x-sp.average(x)\n",
    "    try:\n",
    "        t, x, e, amps, phases = ms.hb_so(duff_osc2, x, freq, verbose = False, f_tol = 1e-6)#, callback = resid)\n",
    "        amp[i]=amps[0]\n",
    "    except:\n",
    "        amp[i] = sp.nan    \n",
    "plt.plot(omega, amp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(x.T,'*')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "omegal = sp.arange(3,.03,-1/200)+1/200\n",
    "ampl = sp.zeros_like(omegal)\n",
    "x = sp.array([[0,-1,1,0,0,0,0]])\n",
    "for i, freq in enumerate(omegal):\n",
    "    # Here we try to obtain solutions, but if they don't work, \n",
    "    # we ignore them by inserting `np.nan` values.\n",
    "    x = x-sp.average(x)\n",
    "    try:\n",
    "        t, x, e, amps, phases = ms.hb_so(duff_osc2, x, freq, f_tol = 1e-6)#, callback = resid)\n",
    "        ampl[i]=amps[0]\n",
    "    except:\n",
    "        ampl[i] = sp.nan\n",
    "plt.plot(omegal, ampl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sp.fftpack.fft(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(x.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(omegal,ampl)\n",
    "plt.plot(omega,amp)\n",
    "#plt.axis([0,3, 0, 10.5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from scipy.optimize import newton_krylov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def duff_amp_resid(a):\n",
    "    return (mu**2+(sigma-3/8*alpha/omega_0*a**2)**2)*a**2-(k**2)/4/omega_0**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mu = 0.05 # damping\n",
    "k = 1 # excitation amplitude\n",
    "sigma = -0.9 #detuning\n",
    "omega_0 = 1 # driving frequency\n",
    "alpha = 0.1 # cubic coefficient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "newton_krylov(duff_amp_resid,-.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigmas = sp.linspace(-1,3,200)\n",
    "amplitudes = sp.zeros_like(aa)\n",
    "x = newton_krylov(duff_amp_resid,1)\n",
    "for i, sigma in enumerate(sigmas):\n",
    "    try:\n",
    "        amplitudes[i] = newton_krylov(duff_amp_resid,x)\n",
    "        x = amplitudes[i]\n",
    "    except:\n",
    "        amplitudes[i] = newton_krylov(duff_amp_resid,0)\n",
    "        x = amplitudes[i]\n",
    "\n",
    "plt.plot(sigmas,amplitudes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigmas = sp.linspace(-1,3,200)\n",
    "sigmasr = sigmas[::-1]\n",
    "amplitudesr = sp.zeros_like(sigmas)\n",
    "x = newton_krylov(duff_amp_resid,3)\n",
    "for i, sigma in enumerate(sigmasr):\n",
    "    try:\n",
    "        amplitudesr[i] = newton_krylov(duff_amp_resid,x)\n",
    "        x = amplitudesr[i]\n",
    "    except:\n",
    "        amplitudesr[i] = sp.nan#newton_krylov(duff_amp_resid,0)\n",
    "        x = amplitudesr[i]\n",
    "        \n",
    "\n",
    "plt.plot(sigmasr,amplitudesr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(sigmasr,amplitudesr)\n",
    "plt.plot(sigmas,amplitudes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
